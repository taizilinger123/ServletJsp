1.http协议(了解)
  (1)什么是http协议
     是由w3c制订的一种网络应用层协议，规定了浏览器与web服务器之间如何通信以及相应的数据包的格式。
     1)如何通信
        step1,建立连接
        step2,发送请求
        step3,发送响应
        step4,关闭连接
     2)特点
        一次请求，一次连接。
        即如果浏览器需要发送新的请求，就需要建立新的连接。这样设计，优点是，服务器可以利用有限的连接为尽可能多的请求服务。
  (2)数据包的结构
     1)请求数据包
       请求行(请求方式  请求资源路径   协议类型和版本)
       消息头
              是一些键值对(使用":"隔开)，表示特定的含义，比如，浏览器可以发送"user-agent"消息头，告诉服务器，浏览器的类型和版本。
       实体内容
              只有当请求方式为post时，实体内容里面才会有数据(请求参数)。
     2)响应数据包
       状态行(协议类型和版本 状态码 状态描述)
             200 正确
             500 系统出错
             404 找不到对应的资源
       消息头
             服务器也可以发送一些消息头给浏览器，比如，发送"content-type"消息头，告诉浏览器，服务器返回的数据类型。
       实体内容
             程序的处理结果，浏览器会解析其中的数据，生成相应的页面。
  (3)两种请求方式
       1)get请求
           a.哪一些情况下，浏览器会发送get请求
             a1.直接输入某个地址
             a2.点击链接
             a3.表单默认提交的方式
           b.特点
             b1.会将请求参数添加到请求资源路径的后面，只能提交少量的数据。
             b2.会将请求参数显示在浏览器地址栏，不安全。
                注：比如路由器就会记录包含了请求参数的请求地址。
       2)post请求
         a.哪一些情况下，浏览器会发送post请求
           设置表单method="post"
         b.特点
           b1.会将请求参数添加到实体内容里面，可以提交大量的数据。
           b2.不会将请求参数显示在浏览器地址栏，相对安全
           注：不会将请求参数加密。
 
2.servlet输出中文
  (1)为什么会有乱码
      out.println方法在默认情况下，会使用"iso-8859-1"来编码。
  (2)如何解决？
      response.setContentType("text/html;charset=utf-8");
3.表单包含有中文参数值
  (1)为什么会有乱码
     表单提交时，浏览器会对表单中的中文参数值进行编码。
     注:会按照打开该表单所在的页面时的字符集来编码。
     服务器端默认情况下，会使用"iso-8859-1"来解码。
  (2)如何解决
     step1,保证表单提交时，按照指定的字符集来编码。
     <meta http-equiv="content-type" content="text/html;charset=utf-8">
     step2,服务器端使用对应的字符集来解码。
         方式一 
               request.setCharacterEncoding("utf-8");
               注：只针对post请求有效。
         方式二
               uname = new String(uname.getBytes("iso-8859-1"),"utf-8");
               注：先还原得到浏览器发送过来的字节数组，然后使用正确的字符集来解码,post和get请求都支持。
4.读取请求参数值
  (1)String request.getParameter(String paramName);
     注:
        a.paramName必须与实际发送过来的参数名一致，如果不一致，会获得null。
        b.有可能获得""。
  (2)String[] request.getParameterValues(String paramName)
     注:
        a.当有多个参数名相同时，使用该方法。
          hello?mp=x1&mp=x2&mp=x3
        b.对于多选框和单选框，如果不选择任何的选项的话，会获得null。

5.使用jdbc访问数据库
  step1,需要将jdbc驱动(jar文件)拷贝到WEB-INF\lib下。
  step2,使用jdbc提供的一套api来访问数据库。
  
  mysql数据库的简单使用
     1)登录mysql,wampserver64
         mysql  -uroot  -p123456;
     2)查看当前有哪些数据库
         show databases;
     3)创建一个新的数据库(同时设置缺省的字符集为utf-8)
        mysql> create database  jsd1507db  default character set utf8;
     4)使用某个数据库
        use jsd1507db;
     5)查看当前数据库有哪些表
        show tables;
     6)建表
        create table emp(
          id int primary key auto_increment,
          name varchar(50),
          salary double,
          age  int
        );
        insert into emp(name,salary,age)values('Sally',2000,20);
        insert into emp(name,salary,age)values('Eric',3000,22);
        select * from emp;
        注: 
          auto_increment自增长列 
        
        create table emp(
           id number(8) primary key,
           name varchar2(50),
           salary number(8,2),
           age number(3)
        );
   
 
GET /web02/hello?qty=8 HTTP/1.1
    请求资源路径 2k
    消息头 键值对 w3c
Host: localhost:8080
Connection: keep-alive
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.9
Cookie: Webstorm-f7e14a61=019e51dd-270a-43ba-83a3-a34694071f87; Pycharm-76604de7=36d2d5a6-77ad-4fe4-9c53-4f2fbfc250bb; oracle.uix=0^^GMT+8:00^p; JSESSIONID=A4A4200E998A84E6A2DD87D7E3676809
 
HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Type: text/html
Content-Length: 162
Date: Mon, 06 Jan 2020 12:01:55 GMT

<h1>hello Kitty</h1><h1>hello Kitty</h1><h1>hello Kitty</h1><h1>hello Kitty</h1><h1>hello Kitty</h1><h1>hello Kitty</h1><h1>hello Kitty</h1><h1>hello Kitty</h1>
 
直接复制web01为web02需要右键web02->Properties->MyEclipse->web->Context Root->web Context-root:/web02改为然后再重新部署Manage Deployments就可以了
Window->Show View->Other->MyEclipse Common->TCP/IP Mointor就可以打开tcp/ip监控了,用法浏览器里输入http://localhost:8888/web02/hello?qty=8,具体可参考https://blog.csdn.net/xuwenwen_2013/article/details/50778245
关闭webroot下的.jsp和.html可视化编辑器Window->Preferences->Editors->File Associations->找到右边的.jsp和.html把选中 MyEclipse  HTML Editor点击右侧 Default 按钮 ―― 点击OK
Project Deployments->Project(web02)->add/选中已有的项目->Redeploy->ok就重新配置了项目
git branch  web02
git branch -a
git checkout web02
git add * 
git commit  -m  "2020-1-6"
git push -u origin web02
git log  --reset  版本号
或者用myeclipse里的文件回退机制项目上右击restore from local history或者文件右击找到replace with->local history
http://localhost:8080/web02/addEmp.html