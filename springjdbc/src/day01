1.Spring与JDBC整合应用
  a.提供了编写DAO的工具类
    JdbcTemplate
    JdbcTemplate.update("insert..",参数);
    JdbcTemplate.query();
    JdbcTemplate.queryForObject();
    select count(*) from emp 
    int rows = JdbcTemplate.queryForInt();
  b.提供了AOP式事务管理(不需要在方法中追加事务提交和回滚)
    FileWriter fw = new FileWriter();
    //fw.write();
    PrintWriter pw = new PrintWriter(fw);//装饰器
    pw.println("xxx");
  c.提供了统一的异常处理
    DataAccessException

2.Spring整合JDBC步骤
  a.搭建spring+jdbc开发环境
    引入spring(ioc,aop,dao)开发包
    添加src/applicationContext.xml
    数据库驱动,dbcp连接池
  *b.编写实体类Emp
  *c.编写EmpDAO组件 
  *d.在applicationContext.xml中扫描EmpDAO,注入JdbcTemplate对象
  
  DBCP(<bean>)-->JdbcTemplate(<bean>)-->EmpDao(扫描)
  
  =============单独使用JDBC============
  a.引入驱动包
  b.编写DBUtil
  c.编写实体类Emp
  d.编写EmpDao

a.增删改
  --获取Connection
  --获取Statement
  --设置SQL中?参数
  --执行SQL操作
  --释放Connection
b.查询
  --获取Connection
  --获取Statement
  --设置SQL中?参数
  --执行SQL操作获取ResultSet结果
  --将ResultSet结果封装成实体对象
  --释放Connection

<property name="dataSource"></property>dataSource数据源,连接池;dbcp,c3p0,proxool
C:\Users\sige>mysql -uroot  -p123456
mysql> show  databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| jsd1507db          |
| mysql              |
| performance_schema |
| sys                |
| tt                 |
+--------------------+
6 rows in set (0.11 sec)
mysql> use jsd1507db;
Database changed
mysql> show  tables;
+---------------------+
| Tables_in_jsd1507db |
+---------------------+
| emp                 |
| user                |
+---------------------+
2 rows in set (0.00 sec)
mysql> desc emp;
+--------+-------------+------+-----+---------+----------------+
| Field  | Type        | Null | Key | Default | Extra          |
+--------+-------------+------+-----+---------+----------------+
| id     | int(11)     | NO   | PRI | NULL    | auto_increment |
| name   | varchar(50) | YES  |     | NULL    |                |
| salary | double      | YES  |     | NULL    |                |
| age    | int(11)     | YES  |     | NULL    |                |
+--------+-------------+------+-----+---------+----------------+
4 rows in set (0.12 sec)

mysql> desc user;
+----------+--------------+------+-----+---------+----------------+
| Field    | Type         | Null | Key | Default | Extra          |
+----------+--------------+------+-----+---------+----------------+
| id       | int(11)      | NO   | PRI | NULL    | auto_increment |
| username | varchar(50)  | YES  | UNI | NULL    |                |
| pwd      | varchar(30)  | YES  |     | NULL    |                |
| name     | varchar(250) | YES  |     | NULL    |                |
| gender   | char(1)      | YES  |     | NULL    |                |
+----------+--------------+------+-----+---------+----------------+
5 rows in set (0.19 sec)
mysql> select  *  from  emp;
+----+--------+--------+------+
| id | name   | salary | age  |
+----+--------+--------+------+
| 18 | lili   | 200000 |   44 |
| 19 | 盛磊   | 900000 |   33 |
|  3 | John   |   6000 |   66 |
| 11 | emp200 |   2000 |   33 |
|  5 | emp02  |   3000 |   23 |
| 13 | 月月   |   2000 |   22 |
|  7 | emp04  |   2000 |   22 |
| 14 | 张三   |  20000 |   22 |
| 17 | 张三   |  10000 |   33 |
| 20 | 杰伦   |  20000 |   33 |
| 21 | spring |  10000 |   20 |
+----+--------+--------+------+
11 rows in set (0.00 sec)
show create table cost;//查看建表字符集charset=utf8
delete from cost;
set names gbk;
mysql> \s
--------------
mysql  Ver 14.14 Distrib 5.7.26, for Win64 (x86_64)

Connection id:          12
Current database:       jsd1507db
Current user:           root@localhost
SSL:                    Not in use
Using delimiter:        ;
Server version:         5.7.26 MySQL Community Server (GPL)
Protocol version:       10
Connection:             localhost via TCP/IP
Server characterset:    latin1
Db     characterset:    utf8         #数据库编码格式是utf8
Client characterset:    gbk          #看连接和客户端编码格式是gbk
Conn.  characterset:    gbk
TCP port:               3306
Uptime:                 3 days 3 hours 58 min 10 sec

Threads: 1  Questions: 124  Slow queries: 0  Opens: 129  Flush tables: 1  Open t
ables: 122  Queries per second avg: 0.000
--------------

public List query(String sql,RowMapper rowMapper){
     List  list = new ArrayList();
     Connection conn = null;
     PreparedStatement prep = null;
     ResultSet rst = null;
     try{
         conn = DBUtil.getConnection();
         prep = conn.prepareStatement(sql);
         rst = prep.executeQuery();
         while(rst.next()){
             Object obj = rowMapper.mapRow(rst);
             list.add(obj);
         }
         return list;
     }catch(Exception e){
         e.printStackTrace();
         throw e;
     }finally{
         DBUtil.close(conn);
     }
}
--资费信息表
create table cost(
    cost_id          int          primary key,
    name             varchar(50)  not  null,
    base_duration    long,
    base_cost        double,
    unit_cost        double,
    status           char(1),
    descr            varchar(100),
    creatime         date,
    startime         date,
    cost_type        char(1)
);

INSERT INTO  COST VALUES (1,'5.9元套餐',20,5.9,0.4,0,'5.9元20小时/月,超出部分0.4元/时',DEFAULT,DEFAULT,NULL);
INSERT INTO  COST VALUES (2,'6.9元套餐',40,6.9,0.3,0,'6.9元40小时/月,超出部分0.3元/时',DEFAULT,DEFAULT,NULL);
INSERT INTO  COST VALUES (3,'8.5元套餐',100,8.5,0.2,0,'8.5元100小时/月,超出部分0.2元/时',DEFAULT,DEFAULT,NULL);
INSERT INTO  COST VALUES (4,'10.5元套餐',200,10.5,0.1,0,'10.5元200小时/月,超出部分0.1元/时',DEFAULT,DEFAULT,NULL);
INSERT INTO  COST VALUES (5,'计时收费',null,null,0.5,0,'0.5元/时,不使用不收费',DEFAULT,DEFAULT,NULL);
INSERT INTO  COST VALUES (6,'包月',null,20,null,0,'每月20元,不限制使用时间',DEFAULT,DEFAULT,NULL);
INSERT INTO  COST VALUES (7,'mm',10,5,null,0,'',DEFAULT,DEFAULT,NULL);
INSERT INTO  COST VALUES (8,'nn',10,7,null,0,'',DEFAULT,DEFAULT,NULL);
INSERT INTO  COST VALUES (9,'qq',10,4,null,0,'',DEFAULT,DEFAULT,NULL);
COMMIT;

=============资费列表显示=====================
a.搭建SpringMVC开发环境
  --添加ioc,webmvc开发包
  --添加src/applicationContext.xml
b.设计流程
  /cost/list.do
  -->DispatcherServlet 
  -->handlerMapping--@RequestMapping 
  -->CostListController
  -->CostDao
  -->ViewResolver
  -->/fee/fee_list.jsp
 
CostDao.java->右键->Refactor->Extract Interface
  
