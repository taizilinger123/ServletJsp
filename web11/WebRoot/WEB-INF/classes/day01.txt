1.jstl(java standard tag lib  java标准标签库)
     (1)jstl是什么
        apache开发的一套jsp标签，后来捐献给了sun,sun将其命名为jstl。
     (2)如何使用jstl
        step1,将jstl相关的jar文件拷贝到WEB-INF\lib下。
        注：如果使用javaee5.0(包含了jstl相关的jar文件)，一般不需要再拷贝了。
        step2,使用taglib指令导入相应的标签。
            <%@taglib uri="http://www.tarena.com.cn/tag" prefix="c"%>
            uri是一个命名空间，prefix是命名空间的前缀(别名)。
            位置:web11->Java EE 5 Libraries->jstl-1.2.jar->META-INF->c.tld-><short-name>c</short-name>
            <uri>http://java.sun.com/jsp/jstl/core</uri>
            注：命名空间(namespace)是为了区分同名元素而设置的一个字符串。
     (3)jstl几个核心的标签
        1)if
            <c:if test="" var="" scope="">
                标签体
            </c:if>
            当test属性值为true时，容器会执行标签体的内容。
            test属性可以使用el表达式来计算。
            var属性：指定一个绑订名称。
            scope属性：指定绑订的范围，值可以是(page,request,session,application)。
            if(){
            }
        2)choose
            <c:choose>
                <c:when test="">
                </c:when>
                <c:otherwise>
                </c:otherwise>
            </c:choose>
            when可以出现1次或者多次，表示一个分支，当test属性值为true时,会执行该分支。
            otherwise可以出现0次或者1次，表示例外。
            if(){
            }else if(){
            }else if(){
            }else{
            }
         3)forEach
            <c:forEach items="" var="" varStatus=""> 
            </c:forEach>
            用来遍历集合或者数组。
            items属性用来指定要遍历的集合或者数组，可以使用el表达式。
            var属性：用来指定一个绑订名，绑订范围固定是pageContext。
            注：每次从集合或者数组中取一个元素，然后将其绑订到pageContext上，绑订名由var属性来指定。
            varStatus属性：用来指定一个绑订名，绑订范围固定是pageContext。
            注：绑定值是一个特殊的对象，该对象提供了一些方法，用来获得当前遍历的状态。
            getIndex():获得当前被遍历的元素的下标(从0开始)。
            getCount():获得当前是第几次遍历(从1开始)。
            http://localhost:8080/web11/list
            工程项目上的三角箭头Java Element Filters->Closed projects就可以隐藏关闭的工程了。
练习：
   将员工管理中的listEmp.jsp和updateEmp.jsp中的java代码除掉。
   提示：使用el表达式和jstl标签。
2.自定义标签
    step1,写一个java类，继承SimpleTagSupport类。           
            
            
            
     
     
       
    
         
           
          
          
   
      
        